name: Build and Push Container to ECR, deploy to lambda

on:
  workflow_dispatch:
  push:
    branches: [main]

env:
  GITHUB_SHA: ${{ github.sha }}
  REGISTRY: ${{ secrets.AWS_ACCOUNT }}.dkr.ecr.ca-central-1.amazonaws.com/list-manager

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.filter.outputs.changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@dc323e67f16fb5f7663d20ff7941f27f5809e9b6 # v2.6.0

      - uses: dorny/paths-filter@4512585405083f25c027a35db413c2b3b9006d50 # v2.11.1
        id: filter
        with:
          filters: |
            api: 'api/**'

  build-push-and-deploy:
    if: needs.changes.outputs.images != '[]'
    runs-on: ubuntu-latest
    needs: changes
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJSON(needs.changes.outputs.images) }}

    steps:
      - name: Checkout
        uses: actions/checkout@dc323e67f16fb5f7663d20ff7941f27f5809e9b6 # v2.6.0

      - name: Build container
        working-directory: ./${{ matrix.image }}
        run: |
          docker build \
          --build-arg git_sha=$GITHUB_SHA \
          -t $REGISTRY/${{ matrix.image }}:$GITHUB_SHA \
          -t $REGISTRY/${{ matrix.image }}:latest .

      - name: Configure AWS credentials
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838 # v1.7.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@261a7de32bda11ba01f4d75c4ed6caf3739e54be # v1.5.3

      - name: Push containers to ECR
        run: |
          docker push $REGISTRY/${{ matrix.image }}:$GITHUB_SHA
          docker push $REGISTRY/${{ matrix.image }}:latest

      - name: Logout of Amazon ECR
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

      - name: Deploy lambda
        if: matrix.image == 'api' || contains(matrix.image, 'scanners')
        run: |
          FNAME=$(sed 's/\//-/g' <<< "${{ matrix.image }}")
          aws lambda update-function-code \
            --function-name "$FNAME" \
            --image-uri $REGISTRY/${{ matrix.image }}:latest > /dev/null 2>&1

      - name: Migrate Database
        if: matrix.image == 'api'
        run: |
          source .github/workflows/scripts/migrate.sh
          migrate

      - name: Docker generate SBOM
        uses: cds-snc/security-tools/.github/actions/generate-sbom@a38917b147dfc8f086abcf81529e3c12f26529b8 # v2.1.0
        with:
          docker_image: "${{ env.REGISTRY }}/${{ matrix.image }}:latest"
          dockerfile_path: "api/Dockerfile"
          sbom_name: "list-manager"
          token: "${{ secrets.GITHUB_TOKEN }}"

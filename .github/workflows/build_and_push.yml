name: Build and Push Container to ECR, deploy to lambda

on:
  workflow_dispatch:
  push:
    branches: [main]

env:
  AWS_REGION: ca-central-1
  GITHUB_SHA: ${{ github.sha }}
  REGISTRY: ${{ secrets.AWS_ACCOUNT }}.dkr.ecr.ca-central-1.amazonaws.com/list-manager

permissions:
  id-token: write
  contents: read

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.filter.outputs.changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0

      - uses: dorny/paths-filter@4512585405083f25c027a35db413c2b3b9006d50 # v2.11.1
        id: filter
        with:
          filters: |
            api: 'api/**'

  build-push-and-deploy:
    if: needs.changes.outputs.images != '[]'
    runs-on: ubuntu-latest
    needs: changes
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJSON(needs.changes.outputs.images) }}

    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0

      - name: Build container
        working-directory: ./${{ matrix.image }}
        run: |
          docker build \
          --build-arg git_sha=$GITHUB_SHA \
          -t $REGISTRY/${{ matrix.image }}:$GITHUB_SHA \
          -t $REGISTRY/${{ matrix.image }}:latest .

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@8c3f20df09ac63af7b3ae3d7c91f105f857d8497 # v4.0.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/list-manager-apply
          role-session-name: ECRPush
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@2fc7aceee09e9e4a7105c0d060c656fad0b4f63d # v1.7.0

      - name: Push containers to ECR
        run: |
          docker push $REGISTRY/${{ matrix.image }}:$GITHUB_SHA
          docker push $REGISTRY/${{ matrix.image }}:latest

      - name: Deploy lambda
        if: matrix.image == 'api' || contains(matrix.image, 'scanners')
        run: |
          FNAME=$(sed 's/\//-/g' <<< "${{ matrix.image }}")
          aws lambda update-function-code \
            --function-name "$FNAME" \
            --image-uri $REGISTRY/${{ matrix.image }}:latest > /dev/null 2>&1

      - name: Migrate Database
        if: matrix.image == 'api'
        run: |
          source .github/workflows/scripts/migrate.sh
          migrate

      - name: Docker generate SBOM
        uses: cds-snc/security-tools/.github/actions/generate-sbom@eecd7a02a0294b379411c126b61e5c29e253676a # v2.1.4
        with:
          docker_image: "${{ env.REGISTRY }}/${{ matrix.image }}:latest"
          dockerfile_path: "${{ matrix.image }}/Dockerfile"
          sbom_name: "${{ matrix.image }}"
          token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Logout of Amazon ECR
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
